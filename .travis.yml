os:
    - linux
arch:
    - amd64
dist: focal

language: shell

services:
    - docker

branches:
    only:
        - master
        - 0.x
        - /^\d+\.\d+\.\d+$/

env:
    global:
        - DOCKER_COMPOSE_VERSION=1.27.4
        - DOCKER_COMPOSE_URI_PATTERN=https://github.com/docker/compose/releases/download/%s/docker-compose-%s-%s

before_install:
    # setting up docker-compose
    - sudo rm /usr/local/bin/docker-compose
    - |
        sudo curl \
            -L $(printf ${DOCKER_COMPOSE_URI_PATTERN} ${DOCKER_COMPOSE_VERSION} $(uname -s) $(uname -m)) \
            -o /usr/local/bin/docker-compose
    - sudo chmod +x /usr/local/bin/docker-compose

before_script:
    - ls -lth
    # configuring environment
    - |
        bin/configure-env dev && \
        sed -i -E "s/(SELENIUM_PROXY_HOST)=_/\1=0.0.0.0/" .env && \
        sed -i -E "s/(SELENIUM_PROXY_PORT)=_/\1=80/" .env
    # building services
    - |
        docker-compose --env-file .env --file docker-compose.yml build \
            --build-arg "HOST_UID=$(id -u)" \
            --build-arg "CHROME_ARG_PROXY_SERVER=" \
            --force-rm \
            --no-cache \
            selenium-node-chrome
    - docker-compose --env-file .env --file docker-compose.yml build --force-rm --no-cache haproxy lighttpd
    - |
        docker-compose --env-file .env --file docker-compose.yml build \
            --build-arg "HOST_UID=$(id -u)" \
            --force-rm \
            --no-cache \
            app
    # building standalone images
    - |
        docker image build \
        	--build-arg "TIMEZONE=Europe/Moscow" \
        	--build-arg "DEPLOYMENT_PATH=/var/www/sterlett" \
        	--build-arg "PHP_VERSION=7.4" \
        	--tag 127.0.0.1:5000/sterlett-app:latest \
        	--file docker/dev/app/Dockerfile-standalone \
        	.
    - |
        docker image build \
            --build-arg "TIMEZONE=Europe/Moscow" \
        	--build-arg "NODEJS_VERSION=14" \
        	--build-arg "LIGHTTPD_VERSION=1.4.55-r1" \
        	--tag 127.0.0.1:5000/sterlett-lighttpd:latest \
        	--file docker/dev/lighttpd/Dockerfile-standalone \
        	.
    # installing backend dependencies
    - |
        docker-compose run --rm app composer install \
            --no-scripts \
            --no-suggest \
            --classmap-authoritative \
            --ansi \
            --no-interaction
    # running backend tests
    - cp phpunit.xml.dist phpunit.xml
    - docker-compose run --rm app bin/phpunit --configuration phpunit.xml --verbose
    # applying backend configuration
    - cp config/parameters.yml.dev.dist config/parameters.yml
    # installing frontend dependencies
    - docker-compose run --rm app npm ci --no-optional
    # compiling frontend assets
    - docker-compose run --rm app npm run build

script:
    - docker-compose up --no-recreate --no-build --detach
    - docker-compose ps && sleep 5
    # checking frontend is running
    - |
        if [ -z $(docker ps -q --no-trunc | grep $(docker-compose ps -q lighttpd)) ]; then
            docker-compose logs lighttpd
            exit 1
        fi
    # checking backend is running
    - |
        if [ -z $(docker ps -q --no-trunc | grep $(docker-compose ps -q selenium-hub)) ]; then
            docker-compose logs selenium-hub
            exit 2
        fi
    - |
        if [ -z $(docker ps -q --no-trunc | grep $(docker-compose ps -q selenium-node-chrome)) ]; then
            docker-compose logs selenium-node-chrome
            exit 3
        fi
    - |
        if [ -z $(docker ps -q --no-trunc | grep $(docker-compose ps -q app)) ]; then
            docker-compose logs app
            exit 4
        fi
    # checking load balancer is running
    - |
        if [ -z $(docker ps -q --no-trunc | grep $(docker-compose ps -q haproxy)) ]; then
            docker-compose logs haproxy
            exit 5
        fi
