
# Copyright (c) 2020 Pavel Petrov <itnelo@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses>.

version: '3.8'

services:
    app:
        image: '${APP_STACK_IMAGE_NAME}:${APP_STACK_IMAGE_VERSION}'
        networks:
            - back_overlay
        deploy:
            mode: replicated
            replicas: 3
            # for cases when we place multiple replicas to a single node; provides all IP addresses to the haproxy
            endpoint_mode: dnsrr
            placement:
                constraints:
                    - "node.role == worker"
                # distribute containers evenly between all available nodes in the swarm by configured geography
                preferences:
                    -   spread: node.labels.provider_location_machine
            restart_policy:
                condition: on-failure
                delay: 3s
                max_attempts: 3
                # time to ensure container is properly restarted
                window: 30s
            update_config:
                parallelism: 1
                # restarting containers one by one with some time intervals to prevent complete service denial
                # in case when all containers are down simultaneously
                delay: 30s
            resources:
                limits:
                    cpus: '0.5'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M

    lighttpd:
        image: '${LIGHTTPD_STACK_IMAGE_NAME}:${LIGHTTPD_STACK_IMAGE_VERSION}'
        networks:
            - back_overlay
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints:
                    - "node.role == worker"
            restart_policy:
                condition: on-failure
                delay: 3s
                max_attempts: 3
                window: 15s
            resources:
                limits:
                    cpus: '0.5'
                    memory: 128M
                reservations:
                    cpus: '0.25'
                    memory: 64M

    haproxy:
        image: 'haproxy:${HAPROXY_VERSION}-alpine'
        networks:
            - back_overlay
        ports:
            -   published: ${HAPROXY_PORT_EXPOSE}
                target: 80
                protocol: tcp
                # to bypass the ingress routing mesh and route requests directly to the local container
                mode: host
        dns:
            # docker dns service at :53; will be polled by the haproxy, according to "resolvers" directive
            - 127.0.0.11
            # optionally, if we want to preserve access to the worldwide network from the container
            - 8.8.8.8
        volumes:
            - ./docker/dev/haproxy/haproxy.stack.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
        deploy:
            mode: replicated
            replicas: 1
            placement:
                # fixed place, on the specified swarm node; single instance
                constraints:
                    - "node.role == manager"
            restart_policy:
                condition: any
                delay: 5s
                max_attempts: 5
                window: 60s

networks:
    back_overlay:
        driver: overlay
        driver_opts:
            # to encrypt data transfer between nodes; whenever swarm nodes are in different data centers and no other
            # security measures applied
            encrypted: ''
        # to ensure an external service can access this network
        attachable: true
