
services:

#    Universal template for subscribing on events from PSR-14 dispatchers (Psr\EventDispatcher\EventDispatcherInterface).
#    Each listener callback will be added to the event loop as future tick and executed asynchronously (if event was
#    dispatched by DeferredEventDispatcher). Requires a registered compiler pass for the DI container.
#
#    Use cases: execution time is "chunked" (less data, more work); each event is supposed to provide the full data
#    for the action chain, but all callbacks are deferred (the order is still preserved).
#
#    app.event.listener.xyz_listener:
#        class: Sterlett\Event\Listener\XyzListener
#        arguments:
#            - '@serviceId'
#        tags:
#            -   name: 'psr14.event_listener'
#                event: 'app.event.xyz_happened'
#                method: 'onXyzHappened'

#    Universal template for subscribing on events from Evenement's emitters (Evenement\EventEmitterInterface).
#    Evenement is an alternative event dispatching interface and boilerplate, used by ReactPHP components internally,
#    for components like sockets, streams and servers, see https://github.com/igorw/evenement. There is no centralized
#    event dispatcher in this approach, so each possible dispatcher or "emitter" (using library's terms) should be
#    declared explicitly for the listener. Requires a registered compiler pass from the "Bridge\Evenement" scope.
#
#    Use cases: data is chunked (more data, less work); each event potentially can carry a small, chunked piece of
#    result, so listener should be prepared to deal with it (some merging routine). No defer logic here, all listeners
#    will be called one by one right after event has been triggered.
#
#    app.event.listener.xyz_listener:
#        class: Sterlett\Event\Listener\XyzListener
#        arguments:
#            - '@serviceId'
#        tags:
#            -   name: 'evenement.event_listener'
#                dispatcher: 'react.stream.xyz_stream'
#                event: 'data'
#                method: 'onDataReceived'

#    app.event.listener.cpu_mark_acceptance_listener.stub:
#        class: Sterlett\Event\Listener\CpuMarkAcceptanceListener
#        arguments:
#            - '@app.request.handler.hardware_mark_handler'
#        tags:
#            -   name: 'evenement.event_listener'
#                dispatcher: 'react.stream.readable_resource_stream.file_cpus_json'
#                event: 'data'
#                method: 'onCpuMarkReceived'

    app.event.listener.cpu_mark_acceptance_listener:
        class: Sterlett\Event\Listener\CpuMarkAcceptanceListener
        arguments:
            - '@app.request.handler.hardware_mark_handler'
        tags:
            -   name: 'psr14.event_listener'
                event: !php/const Sterlett\Event\VBRatiosEmittedEvent::NAME
                method: 'onCpuMarkReceived'
