
services:
    # default configuration will be applied for ALL SERVICES (if a node with the same name is not explicitly specified
    # in the target file); this behavior is a result of Symfony DI logic revision, see YamlFileLoader from the
    # "Bridge\Symfony" scope.
    _defaults:
        # automatically injects dependencies in your services
        autowire: false
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # similar to "_defaults" options for service definitions, but for the specified interface/class,
    # see https://github.com/symfony/dependency-injection/blob/v5.1.0/Loader/YamlFileLoader.php#L89
    _instanceof:
        # all services that implement target interface will receive these definition options in the DI container,
        # tag attributes is not available here (5.1.0).
        Evenement\EventEmitterInterface:
            tags:
                - 'evenement.event_dispatcher'

    # - !service_locator
    #     service_key1: '@service1'
    #     service_key2: '@service2'
    #
    # $serviceLocator (Symfony\Component\DependencyInjection\ServiceLocator)
    # $serviceLocator->get('service_key1');

    # - !tagged_iterator 'tag_name'
    #
    # $taggedIterator (Symfony\Component\DependencyInjection\Argument\RewindableGenerator)
    # foreach ($taggedIterator as $service) {
    #     // only object access
    # }
    #
    # - !tagged_iterator
    #     tag: 'tag_name'
    #     index_by: 'tag_attribute'
    #
    # $taggedIterator (Symfony\Component\DependencyInjection\Argument\RewindableGenerator)
    # foreach ($taggedIterator as $id => $service) {
    #     // object access
    #     // value of specified tag attribute with id as a fallback; additional tag attributes payload is not supported
    #     // in 5.1.0: https://github.com/symfony/dependency-injection/blob/v5.1.0/Loader/YamlFileLoader.php#L227
    # }

    # - !tagged_locator
    #     tag: 'tag_name'
    #     index_by: 'service_key'
    #
    # As a result of that logic merge, we can build a ServiceLocator instance dynamically, by traversing all elements,
    # defined by the specified tagged iterator configuration, and accessing services by get(service_key value) method
    # instead of foreach or other possible loop-based scenarios.
    #
    # $taggedLocator (Symfony\Component\DependencyInjection\ServiceLocator)
    # $serviceLocator->get('service_key1');

    service_warmer:
        class: Sterlett\Bridge\Symfony\Component\DependencyInjection\ServiceWarmer
        public: true
        arguments:
            - !tagged_iterator 'service_warmer.warmable'

    service_warmer.evenement:
        class: IteratorIterator
        arguments:
            - !tagged_iterator 'evenement.event_dispatcher'
        tags:
            - 'service_warmer.warmable'
